"use client";
import React, {  lazy, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useForm } from "react-hook-form";

const Navbar  = lazy(() => import("@/components/Navbar"));
const Footer  = lazy(() => import("@/components/Footer"));
import styles from '@/app/Home.module.css';


interface DataProps {
  name: string;
  email: string;
  message: string;
}

const EmailSection: NextPage = () => {
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    defaultValues: {
      name: "",
      email: "",
      message: "",
    },
  });

  const onSubmit = async (data: DataProps) => {
    try {
      setIsLoading(true);
      const res = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const body = await res.json();

      if (res.ok) {
        alert(`${body.message} ðŸš€`);
      }

      if (res.status === 400) {
        alert(`${body.message} ðŸ˜¢`);
      }

      setIsLoading(false);
    } catch (err) {
      console.log("Something went wrong: ", err);
    }
  };

  return (
    <main className="bg-[#121212]">
      <Navbar />
      <div>
        <Head>
          <title>Nodemailer with NextJS</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className={styles.container}>
          <h3 className={styles.text}>Contact me!</h3>
          <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
            <label htmlFor="name" className={styles.label}>
              Name
            </label>
            <input
              id="name"
              className={styles.input}
              {...register("name", { required: true })}
              type="text"
            />
            {errors.name && <p className={styles.error}>{errors.name.type}</p>}

            <label htmlFor="email" className={styles.label}>
              Email
            </label>
            <input
              id="email"
              className={styles.input}
              {...register("email", { required: true })}
              type="email"
            />
            {errors.email && (
              <p className={styles.error}>{errors.email.type}</p>
            )}

            <label htmlFor="message" className={styles.label}>
              Message
            </label>
            <input
              id="message"
              className={styles.input}
              {...register("message", { required: true })}
              type="text"
            />
            {errors.message && (
              <p className={styles.error}>{errors.message.type}</p>
            )}

            <button
              type="submit"
              disabled={isLoading}
              className={styles.button}
            >
              {isLoading ? "loading..." : "submit"}
            </button>
          </form>
        </div>
      </div>
      <style jsx>
        {`
          .container {
            margin-top: 100px;
            width: 100%;
          }

          .text {
            font-size: 2rem;
            font-weight: 600;
            color: #fff;
            text-align: center;
          }

          .form {
            display: flex;
            flex-direction: column;
            margin: 0 auto;
            max-width: 40rem;
          }

          .label {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
          }

          .input {
            border: 1px solid #ccc;
            border-radius: 0.25rem;
            font-size: 1.5rem;
            margin-bottom: 1rem;
            padding: 0.5rem;
          }

          .button {
            background: #000;
            border: 1px solid #fff;
            border-radius: 0.25rem;
            color: #fff;
            font-size: 1.5rem;
            font-weight: bold;
            padding: 0.5rem;
            cursor: pointer;
            text-transform: uppercase;
          }

          .button:hover {
            background: rgb(25, 25, 25);
          }

          .error {
            color: rgb(255, 43, 43);
            font-weight: bold;
            text-transform: uppercase;
          }
        `}
      </style>{" "}
      <Footer />
    </main>
  );
};

export default EmailSection;
